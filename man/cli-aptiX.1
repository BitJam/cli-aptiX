.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CLI-APTIX 1"
.TH CLI-APTIX 1 "2017-07-02" "Version 2.0.0" "antiX Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cli\-aptiX  \-\-\- install Debian packages from the command line
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This is a command line wrapper around the basic \f(CW\*(C`apt\-get\*(C'\fR,
\&\f(CW\*(C`apt\-cache\*(C'\fR, and related commands.  It's designed to make it
easy to search for and install Debian packages.  In some ways
it is similar to the \s-1GUI\s0 based Synaptic program.  If you
been wanting something like Synaptic that works in the command
line then  \f(CW\*(C`cli\-aptiX\*(C'\fR might be what you've been looking for.
.SH "SEARCH FOR PACKAGES"
.IX Header "SEARCH FOR PACKAGES"
After the initial \f(CW\*(C`apt\-get update\*(C'\fR you will normally perform
a search to look for packages by name.  You can use \f(CW\*(C`*\*(C'\fR to
match one or more characters and \f(CW\*(C`?\*(C'\fR to match single characters
but these are often not needed unless you want to match more
than one part of a package name as in:
.PP
.Vb 1
\&    linux\-image*antix
.Ve
.PP
which matches all of the antiX kernels. Most regular expression
meta-characters are also supported but they are seldom needed.
.SH "SEARCH RESULTS"
.IX Header "SEARCH RESULTS"
For any search term you enter, there will be four different sets
of results: exact name match, leading name match, any name match,
and description match.  After you enter a search term you will be
shown the number of results in each of four sets before you have
to select which set you want to see.
.IP "\fBExact Name Match\fR" 4
.IX Item "Exact Name Match"
The most restrictive set of results is the exact name match.
Only package names that exactly match your search term are
listed here.  There can be more than one package in this list
if you have used the \f(CW\*(C`*\*(C'\fR or \f(CW\*(C`?\*(C'\fR wildcard characters but
normally there will be at most one match.
.IP "\fBLeading Name Match\fR" 4
.IX Item "Leading Name Match"
This includes all packages names that start with a match
for your seach term.  For example, if you use
the search term \*(L"abc\*(R" then you will get a Leading Name
Match result list that looks like:
.Sp
.Vb 3
\&    1) (I) abcde \- A Better CD Encoder
\&    2) abcm2ps \- Translates ABC music description  ...
\&    3) abcmidi \- converter from ABC to MIDI format ...
.Ve
.Sp
The \f(CW\*(C`(I)\*(C'\fR on the first line indicates that package is already
installed. Notice that all three names begin with search
term \*(L"abc\*(R".
.IP "\fBAny Name Match\fR" 4
.IX Item "Any Name Match"
This list includes all packages with names that have a portion
that matches your search term.  If the search term is \*(L"abc\*(R" then
the any name match results will be something like:
.Sp
.Vb 8
\&    1) (I) abcde \- A Better CD Encoder
\&    2) abcm2ps \- Translates ABC music description  ... 
\&    3) abcmidi \- converter from ABC to MIDI format ...
\&    4) berkeley\-abc \- ABC \- A System for Sequentia ...
\&    5) grabc \- simple program to determine the col ...
\&    6) libakonadi\-kabc4 \- Akonadi address book acc ...
\&    7) libkabc4 \- library for handling address boo ...
\&    8) python\-backports\-abc \- Backport of the "col ...
.Ve
.Sp
Notice that this list contains all the package names from the
previous list plus packages that contain \*(L"abc\*(R" later on in
the name.
.IP "\fBName or Description Match\fR" 4
.IX Item "Name or Description Match"
This list contains all of the packages from the previous list
plus any packages that contain your search term in their
description.
.SH "SELECTING PACKAGES FROM A SEARCH RESULT LIST"
.IX Header "SELECTING PACKAGES FROM A SEARCH RESULT LIST"
As long as the entire list fits on the screen, this is
straightforward, just type in the number associated with the
package you want to install.  But if the list is too long to all
fit on the screen at once then you will need to scroll through
the list using \f(CW\*(C`Up\-Arrow\*(C'\fR and \f(CW\*(C`Down\-Arrow\*(C'\fR and <Page\-Up> and
\&\f(CW\*(C`Page\-Down\*(C'\fR to scroll the list (and even \f(CW\*(C`Left\-Arrow\*(C'\fR and
\&\f(CW\*(C`Right\-Arrow\*(C'\fR to scroll sideways).  Scroll the list so the
package you want to select is near the bottom of the screen and
then press 'q'.  You will be asked to enter the number or numbers
of the packages you want to mark or install.
.PP
You can enter multiple numbers separated by spaces or commas
and you can also enter ranges of number using a hypen so
.PP
.Vb 1
\&    3 \- 7   means 3,4,5,6,7
.Ve
.PP
The first number in a range defaults to one and the last number
defaults to the total number of packages in the list so entering
a hyphen with nothing else will select every package from the
list (which is not necessarily a good idea for long lists)
.SH "INSTALLING A PACKAGE"
.IX Header "INSTALLING A PACKAGE"
Once you have selected a package from the search list, you will
be given the chance to install it.  If the package was already
installed then you will be given more options (in progress).
.SH "FAQ"
.IX Header "FAQ"
.IP "\(bu" 4

.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2017
BitJam for antiX <http://antix.freeforums.org/>
